#summary Papers we have read in our research.

 * ITS/AI
Building Intelligent Interactive Tutors: Student-Centered Strategies For Revolutionizing E-Learning.<br>
Woolf, Beverly Park.  2009.<br>
Morgan Kaufmann Publishers, New York.<br>
-- A textbook that defines what an Intelligent Tutoring System is, presents several examples, and explains how ITSs are designed and implemented.

 * ITS/AI
Developing intelligent programming tutors for novice programmers<br>
Nelishia Pillay, Page 78-82, ACM SIGCSE Bulletin, v.35 n.2, June 2003<br>
-- Proposes a generic model for a programming ITS. Defines the modules that would be included, and descriptions of their function and interactions.

[http://www.cs.cmu.edu/~mazda/ITS/literature.htm Older ITS related resources] 

[https://spaces.umbc.edu/display/pycs1/Bibliography Teaching CS1 in Python - Bibliography] 

--------------------------------------------------------------------
ITiCSE'09, SIGCSE Bulletin 41(3), September 2009

 * Recursion
[Gunion09 Curing recursion aversion]<br>
Katherine Gunion, Todd Milford, Ulrike Stege

 * Tools
[Pargas09 What were they thinking?]<br>
Roy P. Pargas, Samuel Bryfczynski<br>
-- web-based tool for "replaying student solutions"

 * Program Tracing
[Lister09 Further evidence of a relationship between explaining, tracing and writing skills in introductory programming]<br>
Raymond Lister, Colin Fidge, Donna Teague<br>
-- "hierarchy of programming skills" in Python

 * Visualization
[Ma09 Improving the mental models held by novice programmers using cognitive conflict and jeliot visualisations]<br>
Linxiao Ma, John Ferguson, Marc Roper, Isla Ross, Murray Wood

 * Visualization
[AlBarakati09 The effect of visualizing roles of variables on student performance in an introductory programming course]<br>
Nouf M. Al-Barakati, Arwa Y. Al-Aama

 * ITS/AI
[Kasurinen09 Estimating programming knowledge with Bayesian knowledge tracing]<br>
Jussi Kasurinen, Uolevi Nikula

 * Visualization
[Boisvert09 A visualisation tool for the programming process]<br>
Charles R. Boisvert

 * Visualization; Recursion
[VelazquezIturbide08 Interactive visualization of recursion with SRec]<br>
J. Á Velázquez-Iturbide, Antonio Pérez-Carrasco, Jaime Urquiza-Fuentes

 * ITS/AI
[Kiesmueller09 Automatically identifying learners' problem solving strategies in-process solving algorithmic problems]<br>
Ulrich Kiesmueller, Torsten Brinda

 * ITS/AI
Evaluating students' programs using automated assessment: a case study<br>
John English, Tammy Rosenthal, Page 371<br>
-- students give positive feedback after using Checkpoint system to submit a programming assignment

 * ITS/AI
Developing classification criteria for programming tasks<br>
Bronius Skupas, Valentina Dagiene, Miguel Revilla, Page 373<br>
-- Task classification for the "Online Judge" ITS system

 * Visualization
[Pantaleev09 Dzver-a visual computer science learning environment]<br>
Alex Pantaleev

 * Recursion
[Stephenson09 Visual examples of recursion]<br>
Ben Stephenson

 * Recursion
Mental models of recursive computations vs. recursive analysis in the  problem domain<br>
Claudio Mirolo, Page 397<br>
-- investigation into correlation between students' mental models of recursion and recursive problem-solving ability

SIGCSE'09, SIGCSE Bulletin 41(1), March 2009

 * Miscellaneous
[Hanks09a CS1 students speak-advice for students by students]<br>
Brian Hanks, Laurie Murphy, Beth Simon, Renée McCauley, Carol Zander

 * Student Knowledge
[Hanks09b Successful and Unsuccessful Problem Solving Approaches of Novice Programmers]<br>
Brian Hanks, Matt Brandt

 * Tools
[Pargas09 Using ink to expose students' thought processes in CS2/CS7]<br>
Roy P. Pargas, Samuel Bryfczynski

 * ITS/AI
[Allevato09 Dereferee: exploring pointer mismanagement in student code]<br>
Anthony Allevato, Stephen H. Edwards, Manuel A. Pérez-Quiñones

 * Tools
[Murphy09 Retina: helping students and instructors based on observed programming activities]<br>
Christian Murphy, Gail Kaiser, Kristin Loveland, Sahar Hasan

 * Student Knowledge
[Fenwick09 Another Look at the Behaviors of Novice Programmers]<br>
James B. Fenwick, Jr., Cindy Norris, Frank E. Barry, Josh Rountree, Cole J. Spicer, Scott D. Cheek

 * Miscellaneous
Developing authentic problem solving skills in introductory  computing classes<br>
Katrina Falker, Edward Palmer, Page 4-8<br>
-- introduced cooperative problem solving into intro CS course to increase student attendance, engagement, motivation, and achievement

 * Miscellaneous
New models for the CS1 course: A  fifteen year retrospective<br>
Salter et al., Page 335-336<br>
-- breadth-first and objects-first approaches to CS1 fail over time, but showing real-life applicability of CS can be helpful

 * Miscellaneous
Analyzing programming projects<br>
Stuart A. Hansen, Page 377-381<br>
-- discussion of engagement and frustration levels of CS2 and data structures programming assignments and factors influencing them

 * Program Tracing
Understanding student performance on an algorithm simulation task: implications for guided learning<br>
Anne Philpott, Tony Clear, Jacqueline Whalley, Page 408-412<br>
-- investigation into how to specify program tracing tasks and classify student responses to them

ITiCSE'08, SIGCSE Bulletin 40(3), September 2008

 * Tools
[Norris08 ClockIt: collecting quantitative data on how beginning software developers really work]<br>
Cindy Norris, Frank Barry, James B. Fenwick Jr., Kathryn Reid, Josh Rountree

 * Program Tracing
[Sheard08 Going SOLO to assess novice programmers]<br>
Judy Sheard, Angela Carbone, Raymond Lister, Beth Simon, Errol Thompson, Jacqueline L. Whalley

 * Visualization; Recursion
[VelazquezIturbide08 SRec-an animation system of recursion for algorithm courses]<br>
J. Ángel Velázquez-Iturbide, Antonio Pérez-Carrasco, Jaime Urquiza-Fuentes

 * Recursion
[RubioSanchez08 A gentle introduction to mutual recursion]<br>
Manuel Rubio-Sánchez, Jaime Urquiza-Fuentes, Cristóbal Pareja-Flores

 * Iteration
[Eagle08 Wu's castle: teaching arrays and loops in a game]<br>
Michael Eagle, Tiffany Barnes

 * Student Knowledge
[Ragonis08 Tutoring model for promoting teaching skills of computer science prospective teachers]<br>
Noa Ragonis, Orit Hazzan

 * Student Knowledge
[Bower08 A taxonomy of task types in computing]<br>
Matt Bower

 * Tools
[Edwards08 Web-CAT--automatically grading programming assignments]<br>
Stephen H. Edwards, Manuel A. Perez-Quinones

 * Miscellaneous
[Hazzan08 Reflections on teaching abstraction and other soft ideas]<br>
Orit Hazzan

 * Tools
WebTasks: Online programming exercises made easy<br>
Rossling and Hartte, Page 363<br>
-- online tool for practicing easy programming problems, student solutions are assessed and collected

SIGCSE'08, SIGCSE Bulletin 40(1), March 2008

 * Recursion
[Polycarpou08 A conceptual approach to teaching induction for computer science]<br>
Irene Polycarpou, Ana Pasztor, Malek Adjouadi

 * Student Knowledge
[Reges08 The mystery of "b := (b = false)"]<br>
Stuart Reges

 * Student Knowledge
[Ginat08 Learning from wrong and creative algorithm design]<br>
David Ginat

 * Debugging
[Murphy08a Debugging-the good, the bad, and the quirky -- a qualitative analysis of novices' strategies]<br>
Laurie Murphy, Gary Lewandowski, Renée McCauley, Beth Simon, Lynda Thomas, Carol Zander

 * Debugging
[Nienaltowski08 Compiler Error Messages-What Can Help Novices?]<br>
Marie-Hélène Nienaltowski, Michela Pedroni, Bertrand Meyer

 * Debugging
[Murphy08b Backstop- a tool for debugging runtime errors Backstop: a tool for debugging runtime errors]<br>
Christian Murphy, Eunhee Kim, Gail Kaiser, Adam Cannon

 * Student Knowledge
[Goldman08 Identifying important and difficult concepts in introductory computing courses using a delphi process]<br>
Ken Goldman, Paul Gross, Cinda Heeren, Geoffrey Herman, Lisa Kaczmarczyk, Michael C. Loui, Craig Zilles

 * Student Knowledge
[Starr08 Bloom's taxonomy revisited: specifying assessable learning objectives in computer science]<br>
Christopher W. Starr, Bill Manaris, RoxAnn H. Stalvey

 * Student Knowledge
[Ma09 Using cognitive conflict and visualisation to improve mental models held by novice programmers]<br>
Linxiao Ma, John D. Ferguson, Marc Roper, Isla Ross, Murray Wood

 * Visualization; Recursion
[Subramanian08 A cross-domain visual learning engine for interactive generation of instructional materials]<br>
Subramanian and Casser

ITiCSE'07, SIGCSE Bulletin 39(3), September 2007

 * ITS/AI
ProofChecker: an accessible environment for automata theory correctness proofs<br>
Matthias F. Stallmann, Suzanne P. Balik, Robert D. Rodman, Sina Bahram, Michael C. Grace, Susan D. High, Pages: 48 - 52<br>
-- checks that a DFA is well-formed and matches the language(s) entered by the user

 * Tools
Interface-based programming assignments and automatic grading of java programs<br>
Michael T. Helmick, Pages: 63 - 67<br>
-- yet another automated grading system for Java programs, uses interfaces and reflection

 * Debugging
[McCartney07 Successful students' strategies for getting unstuck]<br>
Robert McCartney, Anna Eckerdal, Jan Erik Mostrom, Kate Sanders, Carol Zander

 * Student Knowledge
[Ginat08 Hasty design, futile patching and the elaboration of rigor]<br>
David Ginat

 * Student Knowledge
Mental models and programming aptitude<br>
Michael E. Caspersen, Kasper Dalgaard Larsen, Jens Bennedsen, Pages: 206 - 210<br>
-- authors find that programming aptitude test that they saw proposed at a conference doesn't work

 * Student Knowledge
Spatial skills and navigation of source code<br>
Sue Jane Jones, Gary E. Burnett, Pages: 231 - 235<br>
-- study suggests spatial ability affects program/code comprehension ability

 * Program Tracing
[Vainio07 Factors in novice programmers' poor tracing skills]<br>
Vesa Vainio, Jorma Sajaniemi

 * Visualization
[Lahtinen07 Targeting program visualizations]<br>
Essi Lahtinen, Hannu-Matti Järvinen, Suvi Melakoski-Vistbacka

 * Visualization
[Crescenzi07 Fully integrating algorithm visualization into a cs2 course.-a two-year experience]<br>
Pilu Crescenzi, Carlo Nocentini

 * Recursion
Students' mental models of recursion at Wits<br>
Ian Douglas Sanders, Vashti C. Galpin, Page 317<br>
-- they determined that their method of teaching recursion to develop good mental models works after switching to Python

 * Tools
An investigation into the automated assessment of the design-code interface<br>
Alan Hayes, Pete Thomas, Neil Smith, Kevin Waugh, Page 324<br>
-- tool checks for consistency between UML diagram and Java source code

 * Tools?
Understanding students' performance in programming assessment questions<br>
Irene Govender, Page 326<br>
-- study finds that CS teachers who just learned Java were better at writing Java code than understanding it

 * Tools; Recursion
Solving recurring student problems with recurrences<br>
Jonathan Byrd, Monty Carter, David Cook, Philip Kirkham, Martha J. Kosa, Page 343<br>
-- tool to help students solve recurrence relations

 * Recursion
[RubioSanchez08 Exploring recursion with fibonacci numbers]<br>
Manuel Rubio-Sánchez, Isidoro Hernán-Losada

SIGCSE'07

 * Visualization
Dynamic Object Viewers for Data Structures<br>
Cross et al., Page 4-8<br>
-- dynamic visualizations of program state, including drawing common data structures (lists, trees, heaps, etc) the way textbooks do

 * Tools
[Adcock07 Which Pointer Errors Do Students Make?]<br>
Adcock et al.

 * Tools
The Virtual Tele-TASK Professor-Semantic Search in Recorded Lectures<br>
Linckels et al., Page 50-54<br>
-- information retrieval system for university lectures (videos) indexed by audio contents using natural language queries

 * Tools
Web-Based Tools for Active Learning in Information Theory<br>
Hamada, Page 60-64<br>
-- interactive environment for promoting active learning in an information theory (coding and transmission) course

 * Miscellaneous
[Anderson07 Supporting Active Learning and Example Based Instruction with Classroom Technology]<br>
Anderson et al.

 * ITS/AI
[Brown07 RegeXeX-an Interactive System Providing Regular Expression Exercises]<br>
Brown and Hardisty

 * Student Knowledge
[Chen07 Commonsense computing: using student sorting abilities to improve instruction]<br>
Chen et al.

 * Visualization
[Shaffer07 Algorithm visualization-A report on the state of the field]<br>
Shaffer, Cooper, Edwards

 * Student Knowledge
[Boustedt07 Threshold concepts in CS: Do they exist and are they useful?]<br>
Boustedt et al.

 * Miscellaneous
Programming studio: A course for improving programming skills in undergraduates<br>
Woodly and Kamin, Page 531-535<br>
-- description of a mid-level CS course (mostly small-group discussion) for improving students' programming style

ITiCSE'06

 * Recursion
[Sanders06 Mental models of recursion revisited]<br>
Sanders et al.

 * ITS/AI
[Dony06 A tool for helping teach a programming method]<br>
Isabelle Dony, Baudouin Le Charlier

 * Student Knowledge
[Boustedt07 Putting threshold concepts into context in computer science education]<br>
Eckerdal et al.

ITS-2008

 * ITS/AI
[Fossati08 Learning Linked Lists: Experiments with the iList System]<br>
D. Fossati, B. Di Eugenio, C. Brown, S. Ohlsson

 * ITS/AI
Evaluating an Authoring Tool for Model-Tracing Intelligent Tutoring Systems<br>
Stephen Blessing and Stephen Gilbert, Page 204-215

 * ITS/AI; Debugging
Automatic Construction of a Bug Library for Object-Oriented Novice Java Programmer Errors<br>
Merlin Suarez, Raymund Sison, Page 184-193

 * ITS/AI
Using Hidden Markov Models to Characterize Student Behavior in Learning-by-Teaching Environments<br>
H. Jeong, A. Gupta, R. Roscoe, J. Wagster, G. Biswas, D. Schwartz,  Page 614-625<br>
-- investigation of student behaviors using an ITS where they have to teach an agent and construct their own concept map

 * ITS/AI
Eliminating the Gap between the High and Low Students through Meta-Cognitive Strategy Instruction<br>
Min Chi, Kurt VanLehn, Page 603-613<br>
-- study suggest that an ITS that teaches a high-level general problem solving strategy would be most effective in deductive domains

---------------------------- added 1/28/10

 * Visualization
Editorial: Program and algorithm visualization in education<br>
Rossling and Velazquez-Iturbide, ACM TOCE 9(2), June 2009.<br>
-- overview of recent history of program and algorithm visualization  research, especially with regard to educational effectiveness

 * Program Tracing
[Venables09 A closer look at tracing, explaining and code writing skills in the novice programmer]<br>
Venables, Tan and Lister, ICER'09.

 * Program Tracing
[Lister09 Relationships between reading, tracing and writing skills in introductory programming]<br>
Lopez, Whalley et al., "," ICER'08.

 * Student Knowledge
[Sajaniemi08 A study of the development of students' visualizations of program state during an elementary object-oriented programming course]<br>
Sajaniemi, Kuittinen, Tikansalo, ICER'07, JERIC 7(4), January 2008.

 * Miscellaneous
[Pears07 A survey of literature on the teaching of introductory programming]<br>
Pears et al., ITiCSE-WGR'07.

 * Debugging
[Simon07 Debugging assistance for novices-a video repository]<br>
Beth Simon, Sue Fitzgerald, Renée McCauley, Susan Haller, John Hamer,  Brian Hanks, Michael T. Helmick, Jan Erik Moström, Judy Sheard, Lynda  Thomas, ITiCSE-WGR'07.

 * Student Knowledge
[Chen07 Commonsense computing: what students know before we teach]<br>
Simon et al., ICER'06.

 * Miscellaneous
Most difficult topics in CS1: Results of an online survey of educators<br>
Nell B. Dale, Page 49-53, SIGCSE Bulletin 38(2), June 2006.<br>
-- survey identifies problem solving, parameter passing, object-oriented design, and student qualities presenting the greatest challenges in CS1

 * Tools
Designing and explaining programs with a literate pseudocode<br>
Geoffrey G. Roy, JERIC 6(1), March 2006.<br>
-- tool for formally integrating pseudocode and actual code and  visualizing the structure of a program


 * Visualization
[Hundhausen05 Personalizing and discussing algorithms within CS1 studio experiences: An observational study]<br>
Christopher D. Hundhausen and Jonathan Lee Brown, ICER'05.

 * Student Knowledge
[Lewandowski05 What novice programmers don't know]<br>
Lewandowski et al., ICER'05.

 * Debugging
CMeRun: Program logic debugging courseware for CS1/CS2 students<br>
Jim Etheredge, Page 22-25, SIGCSE'04.<br>
-- easy to use command-line C++ debugger outputs each statement with variable values as the program runs

 * Miscellaneous
Programming in context: A model-first approach to CS1<br>
Jens Bennedsen and Michael E. Caspersen, Page 477-481, SIGCSE'04.<br>
-- advocates more focus on high level thought processes of programming and design in CS1

 * Recursion
Do senior CS students capitalize on recursion?<br>
David Ginat, Page 82-86, SIGCSE'04.<br>
-- study shows upper-level CS students aren't inclined to use recursion  as a problem-solving strategy, examples and implications given

 * ITS/AI
[Dancik03 A tutor for counter-controlled loop concepts and its evaluation]<br>
Garrett Dancik and Amruth Kumar, 33rd ASEE/IEEE Frontiers in Education Conference, 2003.

 * Debugging
[Xu99 Transformation-Based Diagnosis of Student Programs for Programming Tutoring Systems]<br>
Songwen Xu and Yam San Chee, IEEE Transactions on Software Engineering 29(4), 2003.

 * Debugging
A knowledge-based automated debugger in learning system<br>
Zin et al., Page 248-253, 4th AADEBUG, August 2000.<br>
-- authors implement automated debugging tutor that uses annotated flow graphs and AI techniques to locate and explain bugs

 * ITS/AI
[Ramadhan00 Discover: An intelligent discovery programming system]<br>
Haider Ali Ramadhan, Cybernetics and Systems 31(1), January 2000.

 * Recursion
"Teaching recursion in a procedural environment---how much should we emphasize the computing model?,"<br>
David Ginat and Eyal Shifroni, Page 127-131, SIGCSE'99.

 * Student Knowledge
[Pirolli94 Learning strategies and transfer in the domain of programming]<br>
Peter Pirolli and Margaret Recker, Cognition and Instruction, 12(3), 1994.

 * ITS/AI
[Bertels94 A dynamic view on cognitive student modeling in computer programming]<br>
Koen Bertels, AI-ED 5(1), 1994.

 * Debugging
[GeggHarrison94 Exploiting program schemata in an automated program debugger]<br>
Timothy S. Gegg-Harrison, AI-ED 5(2), 1994.

 * Recursion
"Learning recursion as a concept and as a programming technique,"<br>
Susan Wiedenbeck, Page 275-278, SIGCSE'88.

---------------------------- added 2/2/10

Online Judge -- system for scoring (using test cases) sample "programming competition" type problems<br>
[http://uva.onlinejudge.org/]

AlgoViz -- [http://algoviz.org/] -- "The Algorithm Visualization Portal"

---------------------------- added 2/27/10

 * ITS/AI
[Xu99 Automatic Diagnosis of Student Programs in Programming Learning Environments]<br>
Songwen Xu and Yam San Chee, AI(2) 1999.

--------------------------added 2/28/2010

 * ITS/AI
[Butz06 A Web-based Bayesian Intelligent Tutoring System for Computer Programming]<br>
C.J. Butz, S. Hua, R.B. Maguire, Web Intelligence and Agent Systems 4(1) 2006.

 * ITS/AI
[Soh06 Incorporating an Intelligent Tutoring System into CS1]<br>
Leen-Kiat Soh, SIGCSE'06.

 * ITS/AI
[Yoo06 Intelligent Tutoring System for CS-I and II Laboratory]<br>
Jungsoon Yoo, Chrisila Pettey, Sung Yoo, Judy Hankins, Cen Li, Suk Seo, ACM-SE 44, 2006.

 * Tools
[Kuittinen04 Teaching Roles of Variables in Elementary Programming Courses]<br>
Kuittinen, M, and Sajaniemi, J.  (2004).

--------------------------added 3/8/2010

 * ITS/AI
[Mitrovic07 Intelligent Tutors for All: The Constraint-Based Approach]<br>
Mitrovic, A.; Martin, B.; Suraweera, P.;, Intelligent Systems 22(4) 2007.

 * ITS/AI
[Guzman07 Adaptive testing for hierarchical student models]<br>
Eduardo Guzmán , Ricardo Conejo , José-Luis Pérez-de-la-Cruz  (2007).

 * ITS/AI
[Truong05 Automated feedback for "fill in the gap" programming exercises]<br>
Nghi Truong , Paul Roe , Peter Bancroft  (2005).

-------------------------added 6/14/2010

 * ITS/AI
[Kumar05a Results from the evaluation of the effectiveness of an online tutor on expression evaluation]<br>
Amruth N. Kumar, SIGCSE'05.

 * ITS/AI
[Kumar05b Generation of problems, answers, grade, and feedback---case study of a fully automated tutor]<br>
Amruth N. Kumar, JERIC 5(3), September 2005.

-------------------------added 7/2/2010

 * Student Knowledge
[Goldman08 Setting the Scope of Concept Inventories for Introductory Computing Subjects ]<br>
Ken Goldman, Paul Gross, Cinda Heeren, Geoffrey L. Herman, Lisa Kaczmarczyk, Michael C. Loui, Craig Zilles, TOCE June 2010 v10(2).

 * Visualization
[Taylor09 Predictive vs. passive animation learning tools]<br>
Taylor et al., SIGCSE'09.

-------------------------added 7/7/2010

 * ITS/AI
[Fossati08 Supporting Computer Science Curriculum: Exploring and Learning Linked Lists with iList]<br>
Fossati, D.; Di Eugenio, B.; Brown, C.W.; Ohlsson, S.; Cosejo, D.G.; Lin  Chen;  IEEE Transactions on Learning Technologies 2(2), April 2009.

 * ITS/AI
[Fossati08 I learn from you, you learn from me: How to make iList learn from students]<br>
Fossati, D.; Di Eugenio, B.; Ohlsson, S.; Brown, C.W.; Lin  Chen;  Cosejo, D.G.;  AI-ED 2009.

 * ITS/AI
A Knowledge Acquisition System for Constraint-based Intelligent Tutoring Systems<br>
Suraweera, P.; Mitrovic, A.; Martin, B.;  Page 638-645, AI-ED 2005.<br>
-- the authors describe their constraint authoring tool for CBM-based ITSs and how it automatically generates constraints

-------------------------added 7/29/2010

 * ITS/AI
The ASSISTment Builder: Supporting the Life Cycle of Tutoring System Content Creation<br>
Razzaq, L.; Patvarczki, J.; Almeida, S.F.; Vartak, M.; Mingyu Feng; Heffernan, N.T.; Koedinger, K.R.;  IEEE Transactions on Learning Technologies 2(2), May 2009.<br>
-- presents a tool for creating and refining example-tracing tutors and presents the tutoring system itself and examines its cost effectiveness

 * ITS/AI
[Ramadhan00 Improving the engineering of model tracing based intelligent program diagnosis]<br>
Haider Ali Ramadhan, IEE Proceedings, Software Engineering 144(3), June 1997.

 * ITS/AI
[Corbett00 Instructional interventions in computer-based tutoring: differential impact on learning time and accuracy]<br>
Albert Corbett and Holly Trask, SIGCHI'00.

 * ITS/AI
[Corbett00 Locus of feedback control in computer-based tutoring: impact on learning rate, achievement and attitudes]<br>
Albert Corbett and John Anderson, SIGCHI'01.

 * ITS/AI
A Critique of Kodaganallur, Weitz, and Rosenthal, "A Comparison of  Model-Tracing and Constraint-Based Intelligent Tutoring Paradigms"<br>
Antonija Mitrovic and Stellan Ohlsson, Page 277-289, AI-ED 16(3), 2006.<br>
-- inventors explain the correct way to implement constraint-based modeling in response to a criticism

-------------------------added 8/10/2010

 * ITS/AI
[Kumar06 A Scalable Solution for Adaptive Problem Sequencing and its Evaluation]<br>
Amruth Kumar, AH'06.

 * ITS/AI
[Kumar06 A Scalable Solution for Adaptive Problem Sequencing and its Evaluation Using Enhanced Concept Map for Student Modeling in a Model-Based Programming Tutor]<br>
Amruth Kumar, FLAIRS'06.

 * ITS/AI
Explanation of step-by-step execution as feedback for analytical problems in programming, and its generation in model-based tutors<br>
Amruth Kumar, TICL'05/06.<br>
-- author explains the design of the expert model in his tutors and how it is used to generate step-by-step explanations of program execution

-------------------------added 10/1/2010

 * ITS/AI
[Mitrovic01 Optimising ITS Behaviour with Bayesian Networks and Decision Theory]<br>
Antonija Mitrovic and Michael Mayo, AI-ED 12(2), 2001.